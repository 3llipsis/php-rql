{"name":"PHP-RQL","tagline":"A PHP client driver for the RethinkDB query language (ReQL).","body":"PHP-RQL\r\n=======\r\n\r\nPHP-RQL provides a driver to access [RethinkDB](http://rethinkdb.com) databases from PHP code.\r\nIt is licensed under the terms of the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\nRead the example below or the [API documentation](http://danielmewes.dnsalias.net/~daniel/php-rql-api/) to find out more.\r\n\r\nUpdates\r\n-------\r\n\r\n* 12/04/2015 New release: PHP-RQL 2.2.0. Adds support for the `values` term, the `$conn->server()` command, and the optional `r\\uuid` string argument from [RethinkDB 2.2](http://rethinkdb.com/blog/2.2-release/). PHP-RQL now conforms to PSR2 and PSR4, thanks to a major refactoring by @mbrevda. The testing system is now based on PHPUnit.\r\n* 09/20/2015 New release: PHP-RQL 2.1.0. Adds support for the `floor`, `ceil` and `round` terms from [RethinkDB 2.1](http://rethinkdb.com/blog/2.1-release/). Added support for SSL connections. To connect to an SSL host, use `r\\connect(array(\"host\" => \"<hostname>\", \"port\" => <port>, \"apiKey\" => \"<api key>\", \"ssl\" => array(\"cafile\" => \"<path to ca cert>\")))`.\r\n* 08/04/2015 Bug fix release: PHP-RQL 2.0.1. Fixes an issue that caused PHP-RQL to get caught in an infinite loop if a connection was lost.\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP 5.3\r\n* RethinkDB 2.2\r\n\r\nInstalling\r\n----------\r\n* Use [Composer](http://getcomposer.org):\r\n  ```require: \"danielmewes/php-rql\": \"dev-master\"```\r\n* Install manually:\r\n  1. Download the ZIP file of this repository or clone it using git.\r\n  2. Unpack it.\r\n  3. Copy the `rdb` directory into the path of your PHP project, or your system's PHP path (e.g. `/usr/share/php`).\r\n\r\nExample\r\n-------\r\n\r\n```php\r\n<?php\r\n    // Load the driver\r\n    require_once(\"rdb/rdb.php\");\r\n\r\n    // Connect to localhost\r\n    $conn = r\\connect('localhost');\r\n\r\n    // Create a test table\r\n    r\\db(\"test\")->tableCreate(\"tablePhpTest\")->run($conn);\r\n\r\n    // Insert a document\r\n    $document = array('someKey' => 'someValue');\r\n    $result = r\\table(\"tablePhpTest\")->insert($document)\r\n        ->run($conn);\r\n    echo \"Insert: $result\\n\";\r\n\r\n    // How many documents are in the table?\r\n    $result = r\\table(\"tablePhpTest\")->count()->run($conn);\r\n    echo \"Count: $result\\n\";\r\n\r\n    // List the someKey values of the documents in the table\r\n    // (using a mapping-function)\r\n    $result = r\\table(\"tablePhpTest\")->map(function($x) {\r\n            return $x('someKey');\r\n        })->run($conn);\r\n\r\n    foreach ($result as $doc) {\r\n        print_r($doc);\r\n    }\r\n\r\n    // Delete the test table\r\n    r\\db(\"test\")->tableDrop(\"tablePhpTest\")->run($conn);\r\n?>\r\n```\r\n\r\nAttributions\r\n------------\r\n* PHP-RQL uses pb4php http://code.google.com/p/pb4php/ by Nikolai Kordulla.\r\n* The API documentation is based on the official RethinkDB API documentation.\r\n* The API documentation is built using jTokenizer by Tim Whitlock (http://timwhitlock.info) and PHP Markdown by Michel Fortin (https://michelf.ca/).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}