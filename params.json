{"name":"PHP-RQL","tagline":"A PHP client driver for the RethinkDB query language (ReQL).","body":"PHP-RQL\r\n=======\r\n\r\nPHP-RQL provides a driver to access [RethinkDB](http://rethinkdb.com) databases from PHP code.\r\nIt is licensed under the terms of the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\nDocumentation is available in our Wiki: http://php-rql.dnsalias.net/wiki/\r\n\r\nUpdates\r\n-------\r\n\r\n* 10/01/2014 New release: PHP-RQL 1.15.0. Support for new features in [RethinkDB 1.15](http://rethinkdb.com/blog/1.15-release/). Namely `r\\uuid()` and geospatial terms. In PHP-RQL, you can create a geospatial index through the `table->indexCreateGeo()` term. A geospatial multi index can be created through `table->indexCreateMultiGeo()`.\r\n* 10/01/2014 New release: PHP-RQL 1.14.0. Support for new features in [RethinkDB 1.14](http://rethinkdb.com/blog/1.14-release/). Namely `r\\binary()` and indexed `distinct()`.\r\n* 06/17/2014 New release: PHP-RQL 1.13.0. Uses [RethinkDB 1.13](http://rethinkdb.com/blog/1.13-release/)'s new JSON API instead of protocol buffers. Support for `r\\http()`, `r\\random()` and `changes()`. Minor bug fixes.\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP 5.3\r\n* RethinkDB 1.15\r\n\r\nInstalling\r\n----------\r\n* Use [Composer](http://getcomposer.org):\r\n  ```require: \"danielmewes/php-rql\": \"dev-master\"```\r\n* Install manually:\r\n  1. Download the ZIP file of this repository or clone it using git.\r\n  2. Unpack it.\r\n  3. Copy the contents of the src directory (folders pb4php and rdb) into the path of your PHP project, or your system's PHP path (e.g. /usr/share/php).\r\n\r\nExample\r\n-------\r\n\r\n```php\r\n<?php\r\n    // Load the driver\r\n    require_once(\"rdb/rdb.php\");\r\n\r\n    // Connect to localhost\r\n    $conn = r\\connect('localhost');\r\n\r\n    // Create a test table\r\n    r\\db(\"test\")->tableCreate(\"tablePhpTest\")->run($conn);\r\n\r\n    // Insert a document\r\n    $document = array('someKey' => 'someValue');\r\n    $result = r\\table(\"tablePhpTest\")->insert($document)\r\n        ->run($conn);\r\n    echo \"Insert: $result\\n\";\r\n\r\n    // How many documents are in the table?\r\n    $result = r\\table(\"tablePhpTest\")->count()->run($conn);\r\n    echo \"Count: $result\\n\";\r\n\r\n    // List the someKey values of the documents in the table\r\n    // (using a mapping-function)\r\n    $result = r\\table(\"tablePhpTest\")->map(function($x) {\r\n            return $x('someKey');\r\n        })->run($conn);\r\n            \r\n    foreach ($result as $doc) {\r\n        echo \"Doc: $doc\\n\";\r\n    }\r\n       \r\n    // Delete the test table\r\n    r\\db(\"test\")->tableDrop(\"tablePhpTest\")->run($conn);\r\n?>\r\n```\r\n\r\nAttributions\r\n------------\r\n* PHP-RQL uses code from [pb4php](http://code.google.com/p/pb4php/) by Nikolai Kordulla.\r\n* The documentation system and most of the API documentation (except for PHP-specific parts) are from [RethinkDB](http://rethinkdb.com), as is the protocol specification used.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}