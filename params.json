{"name":"PHP-RQL","tagline":"A PHP client driver for the RethinkDB query language (ReQL).","body":"PHP-RQL\r\n=======\r\n\r\nPHP-RQL provides a driver to access [RethinkDB](http://rethinkdb.com) databases from PHP code.\r\nIt is licensed under the terms of the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\nDocumentation is available in our Wiki: http://php-rql.dnsalias.net/wiki/\r\n\r\nUpdates\r\n-------\r\n\r\n* 05/16/2014 New release: PHP-RQL 1.12.2. Replaced the internal handling of `r\\row()`. Fixes an [issue](https://github.com/danielmewes/php-rql/issues/62) with `branch()`.\r\n* 03/28/2014 New release: PHP-RQL 1.12.1. Fixes a regression due to which `getField()` only accepted string constants as its argument. It now accepts either a string or a ReQL query again. Thanks to [Alexis Okuwa](https://github.com/wojons) for investigating this bug!\r\n* 03/25/2014 New release: PHP-RQL 1.12.0. Support for new [RethinkDB 1.12 features](https://github.com/rethinkdb/rethinkdb/releases), including the new terms `group()`, `ungroup()`, `rObject()`, `split()`, `upcase()` and `downcase()`. If you are using `groupedMapReduce()` (removed), `groupBy()` (removed) or `reduce()` (optional base argument removed), you may have to modify your application. Other changes in PHP-RQL 1.12.0 include: `db()` and `table()` now accept ReQL terms as their argument, `r\\systemInfo()` includes the version of PHP-RQL, and lambda functions are allowed to return native PHP types, rather than having to wrap the return value into an `r\\expr()`.\r\n\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP 5.3\r\n* RethinkDB 1.12\r\n\r\nInstalling\r\n----------\r\n* Use [Composer](http://getcomposer.org):\r\n  ```require: \"danielmewes/php-rql\": \"dev-master\"```\r\n* Install manually:\r\n  1. Download the ZIP file of this repository or clone it using git.\r\n  2. Unpack it.\r\n  3. Copy the contents of the src directory (folders pb4php and rdb) into the path of your PHP project, or your system's PHP path (e.g. /usr/share/php).\r\n\r\nAfter installing the driver, we recommend that you also install the [PHP Protobuf extension](http://php-rql.dnsalias.net/wiki/index.php/InstallExtension) for improved performance.\r\n\r\nExample\r\n-------\r\n\r\n```php\r\n<?php\r\n    // Load the driver\r\n    require_once(\"rdb/rdb.php\");\r\n\r\n    // Connect to localhost\r\n    $conn = r\\connect('localhost');\r\n\r\n    // Create a test table\r\n    r\\db(\"test\")->tableCreate(\"tablePhpTest\")->run($conn);\r\n\r\n    // Insert a document\r\n    $document = array('someKey' => 'someValue');\r\n    $result = r\\table(\"tablePhpTest\")->insert($document)\r\n        ->run($conn);\r\n    echo \"Insert: $result\\n\";\r\n\r\n    // How many documents are in the table?\r\n    $result = r\\table(\"tablePhpTest\")->count()->run($conn);\r\n    echo \"Count: $result\\n\";\r\n\r\n    // List the someKey values of the documents in the table\r\n    // (using a mapping-function)\r\n    $result = r\\table(\"tablePhpTest\")->map(function($x) {\r\n            return $x('someKey');\r\n        })->run($conn);\r\n            \r\n    foreach ($result as $doc) {\r\n        echo \"Doc: $doc\\n\";\r\n    }\r\n       \r\n    // Delete the test table\r\n    r\\db(\"test\")->tableDrop(\"tablePhpTest\")->run($conn);\r\n?>\r\n```\r\n\r\nAttributions\r\n------------\r\n* PHP-RQL uses [pb4php](http://code.google.com/p/pb4php/) by Nikolai Kordulla.\r\n* A [patch](https://code.google.com/p/pb4php/issues/detail?id=16) for support of doubles in protocol buffers comes from Dmitry Vorobyev\r\n* The documentation system and most of the API documentation (except for PHP-specific parts) are from [RethinkDB](http://rethinkdb.com), as is the protocol buffer specification used.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}