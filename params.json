{"name":"PHP-RQL","tagline":"A PHP client driver for the RethinkDB query language (ReQL).","body":"PHP-RQL\r\n=======\r\n\r\nPHP-RQL provides a driver to access [RethinkDB](http://rethinkdb.com) databases from PHP code.\r\nIt is licensed under the terms of the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\nRead the example below or the [API documentation](http://danielmewes.dnsalias.net/~daniel/php-rql-api/) to find out more.\r\n\r\nUpdates\r\n-------\r\n\r\n* 08/04/2015 Bug fix release: PHP-RQL 2.0.1. Fixes an issue that caused PHP-RQL to get caught in an infinite loop if a connection was lost.\r\n* 04/18/2015 New release: PHP-RQL 2.0.0. PHP-RQL 2.0.0 is *not backwards compatible* to previous releases of PHP-RQL. Besides full support for [RethinkDB 2.0](http://rethinkdb.com/blog/2.0-release/) features, there are a number of important changes in this release:\r\n    * `toNative()` is no longer necessary nor available. Calling `run()` on a query that returns a single datum returns native PHP types immediately. If the query returns a cursor, an object of type `r\\Cursor` is returned as in previous version. However iterating over the cursor will give you native PHP types without a need to call `toNative()`.\r\n    * RethinkDB objects are now returned as instances of PHP's [ArrayObject](http://php.net/manual/en/class.arrayobject.php), thanks to a patch by @wojons. While you can use these objects as if they were associative arrays, be careful if you used to check for `is_array` in your code.\r\n    * Date/time objects are now returned as PHP [DateTime](http://php.net/manual/en/class.datetime.php) objects, thanks to a patch by @duxet. You can still obtain the raw RethinkDB objects by passing `dateFormat => \"raw\"` as an optional argument to `run()`.\r\n    * The deprecated `attr` term has been removed. You can use the identical `getField` instead.\r\n    * A deprecated syntax for specifying a secondary index for `getAll`, `between`, `orderBy`, `eqJoin` and other terms has been removed. Secondary index names must now be specified as an optional `index` argument, e.g. `table->getAll(\"key\", array(\"index\" => \"indexName\"))` instead of the old `table->getAll(\"key\", \"indexName\")`.\r\n    * The API documentation system has been replaced. The documentation is now again based on RethinkDB's official JavaScript driver documentation, and is available at [http://danielmewes.dnsalias.net/~daniel/php-rql-api/](http://danielmewes.dnsalias.net/~daniel/php-rql-api/).\r\n* 02/06/2015 New release: PHP-RQL 1.16.0. Support for new features in [RethinkDB 1.16](http://rethinkdb.com/blog/1.16-release/). Introduces a new `r\\mapMultiple()` term to apply a map to multiple streams.\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP 5.3\r\n* RethinkDB 2.0\r\n\r\nInstalling\r\n----------\r\n* Use [Composer](http://getcomposer.org):\r\n  ```require: \"danielmewes/php-rql\": \"dev-master\"```\r\n* Install manually:\r\n  1. Download the ZIP file of this repository or clone it using git.\r\n  2. Unpack it.\r\n  3. Copy the `src/rdb` directory into the path of your PHP project, or your system's PHP path (e.g. `/usr/share/php`).\r\n\r\nExample\r\n-------\r\n\r\n```php\r\n<?php\r\n    // Load the driver\r\n    require_once(\"rdb/rdb.php\");\r\n\r\n    // Connect to localhost\r\n    $conn = r\\connect('localhost');\r\n\r\n    // Create a test table\r\n    r\\db(\"test\")->tableCreate(\"tablePhpTest\")->run($conn);\r\n\r\n    // Insert a document\r\n    $document = array('someKey' => 'someValue');\r\n    $result = r\\table(\"tablePhpTest\")->insert($document)\r\n        ->run($conn);\r\n    echo \"Insert: $result\\n\";\r\n\r\n    // How many documents are in the table?\r\n    $result = r\\table(\"tablePhpTest\")->count()->run($conn);\r\n    echo \"Count: $result\\n\";\r\n\r\n    // List the someKey values of the documents in the table\r\n    // (using a mapping-function)\r\n    $result = r\\table(\"tablePhpTest\")->map(function($x) {\r\n            return $x('someKey');\r\n        })->run($conn);\r\n\r\n    foreach ($result as $doc) {\r\n        print_r($doc);\r\n    }\r\n\r\n    // Delete the test table\r\n    r\\db(\"test\")->tableDrop(\"tablePhpTest\")->run($conn);\r\n?>\r\n```\r\n\r\nAttributions\r\n------------\r\n* PHP-RQL uses pb4php http://code.google.com/p/pb4php/ by Nikolai Kordulla.\r\n* The API documentation is based on the official RethinkDB API documentation.\r\n* The API documentation is built using jTokenizer by Tim Whitlock (http://timwhitlock.info) and PHP Markdown by Michel Fortin (https://michelf.ca/).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}